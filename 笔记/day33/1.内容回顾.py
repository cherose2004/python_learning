#!/usr/bin/env python
# -*- coding:utf-8 -*-

# 并发编程
#     # 不会有大量的例子和习题
#         # 1.进程 在我们目前完成的一些项目里是不常用到的
#         # 2.线程 后面的爬虫阶段经常用
#             # 前端的障碍
#         # 3.协程
#             # 异步的框架 异步的爬虫模块
#     # 为什么进程用的不多，但是还要来讲
#         # 1.基本功
#         # 2.你可能用不到，但是未来你去做非常复杂的数据分析或者是高计算的程序
#         # 3.进程和线程的很多模型很多概念是基本一致的

# 利用这一段时间 来复习之前的知识点，主要是完成之前没有完成的作业
# 敏捷开发
# 数据库5天 前端10天 框架
# 线程
    # 线程是进程的一部分，每个进程中至少有一个线程
    # 能被CPU调度的最小单位
    # 一个进程中的多个线程是可以共享这个进程的数据的  —— 数据共享
    # 线程的创建、销毁、切换 开销远远小于进程  —— 开销小
# multiprocessing 进程
    # p = Process(target=函数名,args=(参数1,))
    # 1.如何创建一个进程对象
        # 对象和进程之间的关系
            # 进程对象和进程并没有直接的关系
            # 只是存储了一些和进程相关的内容
            # 此时此刻，操作系统还没有接到创建进程的指令
    # 2.如何开启一个进程
        # 通过p.start()开启了一个进程--这个方法相当于给了操作系统一条指令
        # start方法 的 非阻塞和异步的特点
            # 在执行开启进程这个方法的时候
            # 我们既不等待这个进程开启，也不等待操作系统给我们的响应
            # 这里只是负责通知操作系统去开启一个进程
            # 开启了一个子进程之后，主进程的代码和子进程的代码完全异步
    # 3.父进程和子进程之间的关系
        # 父进程会等待子进程结束之后才结束
        # 为了回收子进程的资源
    # 4.不同操作系统中进程开启的方式
        # windows 通过（模块导入）再一次执行父进程文件中的代码来获取父进程中的数据
            # 所以只要是不希望被子进程执行的代码，就写在if __name__ == '__main__'下
            # 因为在进行导入的时候父进程文件中的__name__ != '__main__'
        # linux/ios
            # 正常的写就可以，没有if __name__ == '__main__'这件事情了
    # 5.如何确认一个子进程执行完毕
        # join方法
        # 开启了多个子进程，等待所有子进程结束

