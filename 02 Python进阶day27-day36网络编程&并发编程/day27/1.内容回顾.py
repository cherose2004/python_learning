#!/usr/bin/env python
# -*- coding:utf-8 -*-

# re模块
    # findall  找到所有符合规则的项，并返回列表
    # search   找到第一个符合规则的项，并返回一个对象
    # match    从头开始 找到第一个符合规则的项，并返回一个对象
    # finditer 找到所有符合规则的项，并返回一个迭代器
    # compile  预编译一个正则规则，节省多次使用同一个正则的编译时间
    # sub      替换 默认替换所有，可以使用替换深度参数
    # subn     替换 返回元组
    # split    根据正则规则切割，返回列表，默认不保留切掉的内容

# 分组
    # 分组命名
        # (?P<组名>正则)
    # 引用分组
        # (?P=组命)
    # findall和分组
        # 优先显示分组中的内容
        # (?:)取消这个分组的优先
    # split和分组
        # split会保留正则中分组内匹配到的内容
    # search和分组
        # search取分组中的内容
            # 通过索引取 obj.group(1)
            # 通过组名取 obj.group('组名')

# r'元字符 量词 惰性符号'

# 补充
# []  [^]   带有特殊意义的元字符到字符组内大部分都会取消它的特殊意义
    # 会取消
        # [()+*.]
        # -  [(\-)]  -的位置决定了它的意义，写在字符组的第一个位置/最后一个位置就表示一个普通的横杠
        #             写在字符组的其他任何位置都表示一个范围
# 正则指引

# 找出<h1>123fh</h1><h2>hado</h2>中所有标签内的字符串   爬虫
# import re
# ret = re.findall('<.*?>(.*?)<.*?>','<h1>123fh</h1><h2>hado</h2>')
# print(ret)

# 找出四则运算表达式中的第一个乘除法
# \d*\d|\d/\d
# \d+(\.\d+)?[*/]\d(\.\d+)?
# \d+(\.\d+)?[*/]-?\d(\.\d+)?
# import re
# ret = re.search('\d+(\.\d+)?[*/]-?\d(\.\d+)?','2-3*-5/6')
# print(ret.group())

# 检测用户输入的内容是否是一个合法的身份证号     网页的合法输入（手机号码 qq号码 银行卡号 邮箱地址）
'^[1-9]\d{14}(\d{2}[\dx])?$'
# import re
# inp = input('>>>').strip()
# re.match('[1-9]\d{14}(\d{2}[\dx])?$',inp)   # 首选
# re.search('^[1-9]\d{14}(\d{2}[\dx])?$',inp)
# re.findall('^[1-9]\d{14}(\d{2}[\dx])?$',inp)

